#!/bin/bash

display_current_date_time() {
    echo "$(date)"
}

openrcfile=$1
tag=$2
ssh_key=$3
no_of_serv=3

display_current_date_time
echo "Starting deployment of $tag using $openrcfile for credentials."
source "$openrcfile"

def_network="${tag}_network"
def_subnet="${tag}_subnet"
def_keypair="${tag}_key"
def_router="${tag}_router"
def_security_grp="${tag}_security_group"
haproxyserv="${tag}_HAproxy"
haproxyserv2="${tag}_HAproxy2"
bastionserv="${tag}_bastion"
devlop_serv="${tag}_dev"
virtualip="${tag}_vip"
sshconf_file="config"
knownhosts="known_hosts"
hostsfile="hosts"

if test -f "$sshconf_file"; then
    rm "$sshconf_file"
fi

if test -f "$knownhosts"; then
    rm "$knownhosts"
fi

if test -f "$hostsfile"; then
    rm "$hostsfile"
fi

checking_keypair=$(openstack keypair list -f value --column Name)
if ! grep -qFx "$def_keypair" <<< "$checking_keypair"; then
    keypair_create=$(openstack keypair create --public-key "$ssh_key" "$def_keypair")
    echo "$(date) keypair created $def_keypair"
else
    echo "$(date) $def_keypair already exists"
fi

checking_networks=$(openstack network list -f value --column Name)
if ! grep -qFx "$def_network" <<< "$checking_networks"; then
    network_create=$(openstack network create --tag "$tag" "$def_network" -f json)
    echo "$(date) network created $def_network"
else
    echo "$(date) $def_network already exists"
fi

checking_subnets=$(openstack subnet list -f value --column Name)
if ! grep -qFx "$def_subnet" <<< "$checking_subnets"; then
    subnet_create=$(openstack subnet create --tag "$tag" --network "$def_network" --subnet-range 10.50.0.0/24 --gateway 10.50.0.1 --allocation-pool start=10.50.0.2,end=10.50.0.100 "$def_subnet" -f json)
    echo "$(date) subnet created $def_subnet"
else
    echo "$(date) $def_subnet already exists"
fi

checking_routers=$(openstack router list -f value --column Name)
if ! grep -qFx "$def_router" <<< "$checking_routers"; then
    router_create=$(openstack router create --tag "$tag" "$def_router")
    echo "$(date) router created $def_router"
    # adding subnet and external gateway to the router
    gatewaysetting=$(openstack router set --external-gateway ext-net "$def_router")
    subnetadding=$(openstack router add subnet "$def_router" "$def_subnet")
else
    echo "$(date) $def_router already exists"
fi

checking_secgrps=$(openstack security group list -f value --column Name)

if echo "$checking_secgrps" | grep -qFx "$def_security_grp"; then
    echo "$(date) $def_security_grp already exists"
else
    secgrp_create=$(openstack security group create --tag "$tag" "$def_security_grp" -f json)
    sec_rule1=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress "$def_security_grp")
    sec_rule2=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress "$def_security_grp")
    sec_rule3=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress "$def_security_grp")
    sec_rule4=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress "$def_security_grp")
    sec_rule5=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress "$def_security_grp")
    sec_rule6=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress "$def_security_grp")
    sec_rule7=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 9100 --protocol tcp --ingress "$def_security_grp")
    sec_rule8=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress "$def_security_grp")
    sec_rule9=$(openstack security group rule create --remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress "$def_security_grp")
    sec_rule10=$(openstack security group rule create --protocol 112 "$def_security_grp")

    echo "$(date) security group created $def_security_grp"
fi

echo "$(date) creating virtual port"
viripprt=$(openstack port create --network "$def_network" --fixed-ip subnet="$def_subnet" --no-security-group "$virtualip")

ipadd_notassign=$(openstack floating ip list --status DOWN -f value -c "Floating IP Address")

# servers deployment bastion
serv_contained=$(openstack server list --status ACTIVE --column Name -f value)

if ! echo "$serv_contained" | grep -q "$bastionserv"; then
    if [[ -n "$ipadd_notassign" ]]; then
        floating_ip1=$(echo "$ipadd_notassign" | awk '{print $1}')
        if [[ -n "$floating_ip1" ]]; then
            echo "$(date) floating IP is given for bastion server"
        else
            echo "$(date) Creating floating IP for bastion"
            floating_ip1create=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' >floatipadd1)
            floating_ip1=$(cat floatipadd1)
        fi
    else
        echo "$(date) Creating floating IP for bastion"
        floating_ip1create=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' >floatipadd1)
        floating_ip1=$(cat floatipadd1)
    fi

    create_bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$bastionserv" --key-name "$def_keypair" --flavor "1C-1GB-50GB" --network "$def_network" --security-group "$def_security_grp")
    fipadd_bastion=$(openstack server add floating ip "$bastionserv" "$floating_ip1")
    echo "$(date) Created $bastionserv server"
else
    echo "$(date) $bastionserv already exists"
fi

# servers deployment haproxies
if ! echo "$serv_contained" | grep -q "$haproxyserv"; then
    if [[ -n "$ipadd_notassign" ]]; then
        floating_ip2=$(echo "$ipadd_notassign" | awk '{print $2}')
        if [[ -n "$floating_ip2" ]]; then
            echo "$(date) floating IP is given for Haproxy server"
        else
            echo "$(date) Creating floating IP for Haproxy"
            floating_ip2create=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' >floatipadd2)
            floating_ip2=$(cat floatipadd2)
        fi
    else
        echo "$(date) Creating floating IP for Haproxy"
        floating_ip2create=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address' >floatipadd2)
        floating_ip2=$(cat floatipadd2)
    fi

    create_haproxy=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$haproxyserv" --key-name "$def_keypair" --flavor "1C-1GB-50GB" --network "$def_network" --security-group "$def_security_grp")
    create_haproxy2=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$haproxyserv2" --key-name "$def_keypair" --flavor "1C-1GB-50GB" --network "$def_network" --security-group "$def_security_grp")
    echo "$(date) Two haproxy $haproxyserv and $haproxyserv2 servers are created"
else
    echo "$(date) Two haproxy $haproxyserv and $haproxyserv2 servers already exist"
fi

vip_fipadding=$(openstack floating ip set --port "$virtualip" "$floating_ip2")
addrof_virip=$(openstack port show "$virtualip" -f value -c fixed_ips | grep -Po '\d+\.\d+\.\d+\.\d+')
echo "$addrof_virip" >>addr_vip

prtupdte=$(openstack port set --allowed-address ip-address="$floating_ip2" "$virtualip")

number_devlopserv=$(grep -ocP "${devlop_serv}" <<<"$serv_contained")

if ((no_of_serv < number_devlopserv)); then
    devlopserv_takeout=$((number_devlopserv - no_of_serv))
    for ((i = 0; i < devlopserv_takeout; i++)); do
        devserv_remove=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag}_dev([1-9]+)")
        removed_serv=$(openstack server delete "$devserv_remove" --wait)
        echo "$(date) Deleted $devserv_remove"
    done
elif ((no_of_serv > number_devlopserv)); then
    devlopserv_plus=$((no_of_serv - number_devlopserv))
    j=$((number_devlopserv + 1))

    for ((i = 0; i < devlopserv_plus; i++)); do
        namedevlopserver="${devlop_serv}${j}"
        dser_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$namedevlopserver" --key-name "$def_keypair" --flavor "1C-1GB-50GB" --network "$def_network" --security-group "$def_security_grp")
        echo "$(date) Created $namedevlopserver server"

        active=false
        until $active; do
            server_status=$(openstack server show "$namedevlopserver" -f value -c status)
            if [[ "$server_status" == "ACTIVE" ]]; then
                active=true
            fi
        done

        ((j++))
    done
else
    echo "Required number of dev servers ($no_of_serv) already exists."
fi

floataddr_bastion=$(openstack server list --name "$bastionserv" -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
floataddr_proxy1=$(openstack server show "$haproxyserv" -c addresses | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
floataddr_proxy2=$(openstack server list --name "$haproxyserv2" -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

# update ports of haproxy servers
proxy1_prt=$(openstack port list --fixed-ip ip-address="$floataddr_proxy1" -c ID -f value)
proxy2_prt=$(openstack port list --fixed-ip ip-address="$floataddr_proxy2" -c ID -f value)

prt1_u=$(openstack port set --allowed-address ip-address="$addrof_virip" "$proxy1_prt")
prt2_u=$(openstack port set --allowed-address ip-address="$addrof_virip" "$proxy2_prt")

# config files and hosts files
echo "$(date) Generating config file"
echo "Host $bastionserv" >>"$sshconf_file"
echo "   User ubuntu" >>"$sshconf_file"
echo "   HostName $floataddr_bastion" >>"$sshconf_file"
echo "   IdentityFile ~/.ssh/id_rsa" >>"$sshconf_file"
echo "   UserKnownHostsFile /dev/null" >>"$sshconf_file"
echo "   StrictHostKeyChecking no" >>"$sshconf_file"
echo "   PasswordAuthentication no" >>"$sshconf_file"

echo " " >>"$sshconf_file"
echo "Host $haproxyserv" >>"$sshconf_file"
echo "   User ubuntu" >>"$sshconf_file"
echo "   HostName $floataddr_proxy1" >>"$sshconf_file"
echo "   IdentityFile ~/.ssh/id_rsa" >>"$sshconf_file"
echo "   StrictHostKeyChecking no" >>"$sshconf_file"
echo "   PasswordAuthentication no" >>"$sshconf_file"
echo "   ProxyJump $bastionserv" >>"$sshconf_file"

echo " " >>"$sshconf_file"
echo "Host $haproxyserv2" >>"$sshconf_file"
echo "   User ubuntu" >>"$sshconf_file"
echo "   HostName $floataddr_proxy2" >>"$sshconf_file"
echo "   IdentityFile ~/.ssh/id_rsa" >>"$sshconf_file"
echo "   StrictHostKeyChecking no" >>"$sshconf_file"
echo "   PasswordAuthentication no" >>"$sshconf_file"
echo "   ProxyJump $bastionserv" >>"$sshconf_file"

echo "[bastion]" >>"$hostsfile"
echo "$bastionserv" >>"$hostsfile"
echo " " >>"$hostsfile"
echo "[HAproxy]" >>"$hostsfile"
echo "$haproxyserv" >>"$hostsfile"
echo "$haproxyserv2" >>"$hostsfile"

echo " " >>"$hostsfile"
echo "[webservers]" >>"$hostsfile"

awakeserv=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag}_dev([1-9]+)")
echo "$(date) total number of dev servers existing $awakeserv"

# servers looping
echo "$awakeserv" | while IFS= read -r serv; do
    ipadd=$(openstack server list --name "$serv" -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+')
    echo " " >>"$sshconf_file"
    echo "Host $serv" >>"$sshconf_file"
    echo "   User ubuntu" >>"$sshconf_file"
    echo "   HostName $ipadd" >>"$sshconf_file"
    echo "   IdentityFile ~/.ssh/id_rsa" >>"$sshconf_file"
    echo "   UserKnownHostsFile=/dev/null" >>"$sshconf_file"
    echo "   StrictHostKeyChecking no" >>"$sshconf_file"
    echo "   PasswordAuthentication no" >>"$sshconf_file"
    echo "   ProxyJump $bastionserv" >>"$sshconf_file"

    echo "$serv" >>"$hostsfile"
done

echo " " >>"$hostsfile"
echo "[primary_proxy]" >>"$hostsfile"
echo "$haproxyserv" >>"$hostsfile"
echo " " >>"$hostsfile"
echo "[backup_proxy]" >>"$hostsfile"
echo "$haproxyserv2" >>"$hostsfile"

echo " " >>"$hostsfile"
echo "[all:vars]" >>"$hostsfile"
echo "ansible_user=ubuntu" >>"$hostsfile"
echo "ansible_ssh_private_key_file=~/.ssh/id_rsa" >>"$hostsfile"
echo "ansible_ssh_common_args='-F $sshconf_file'" >>"$hostsfile"

echo "$(date) Running ansible playbook"
ansible-playbook -i "$hostsfile" site.yaml

echo "Bastion IP address: "$floating_ip1""

echo "HAproxy IP address: "$floating_ip2""
